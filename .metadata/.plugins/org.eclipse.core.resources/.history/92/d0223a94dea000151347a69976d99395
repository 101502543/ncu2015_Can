package cof.can.test;

import static org.junit.Assert.*;

import java.util.Timer;
import java.util.TimerTask;

import org.junit.Before;
import org.junit.Test;

import cof.can.udpbc.UDP_Broadcast_Client_Module;
import cof.can.udpus.Dynamic_Object_Module;
import cof.can.udpus.UDP_Update_Server_Module;

public class testAll {

	UDP_Broadcast_Client_Module UDPBC;
	UDP_Update_Server_Module UDPUS;
	domMock mockedDom;
	Timer timer = new Timer();

	@Before
	public void setUp() throws Exception {
		UDPBC = new UDP_Broadcast_Client_Module();
		mockedDom = new domMock();
		UDPUS = new UDP_Update_Server_Module(8888, mockedDom);

	}

	@Test
	public final void testUDPUS() throws InterruptedException {

		// run the UDPBC,UDPUS
		timer.schedule(new control(UDPBC, UDPUS), 0, 1000);
		Thread.sleep(2000);

		// first, use mock to determine how to verify
		mockedDom.set(UDPUS, new Dynamic_Object_Module() {
			@Override
			public void addVirtualCharacter(int clientno) {
				assertEquals("1", clientno);
			}
       
			@Override
			public void addItem(String name, int index, boolean shared) {
				assertEquals("ItemName", name);
			}

			@Override
			public void updateVirtualCharacter(int clientno, String dir,
					int speed, int x, int y) {
				assertEquals("N", dir);
			}

			@Override
			public void updateItem(int index, boolean shared, String owner) {
				assertEquals("1", index);
			}
			
			@Override
			public void output(String command){
				assertEquals("[AD,ItemName,1,OwnerName,1]",command);
			}
		});
		
	   
	}

	@Test
	public void test() throws Exception {

		// test getIPOne
		assertNotNull(UDPBC.getIPOne());
		// test getIPTwo
		assertNotNull(UDPBC.getIPTwo());
		// test getClientIPTable
		assertNotNull(UDPBC.getClientIPTable());

	}
	
}

class control extends TimerTask {
	UDP_Broadcast_Client_Module UDPBC;
	UDP_Update_Server_Module UDPUS;

	public control(UDP_Broadcast_Client_Module UDPBC,
			UDP_Update_Server_Module UDPUS) {
		this.UDPBC = UDPBC;
		this.UDPUS = UDPUS;
	}

	@Override
	public void run() {
		try {
			UDPBC.startUDPBroadCast();
			UDPUS.initiate();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}

class domMock implements Dynamic_Object_Module {

	public UDP_Update_Server_Module UDPUS;
	private Dynamic_Object_Module dom;

	public void set(UDP_Update_Server_Module UDPUS, Dynamic_Object_Module dom) {
		this.UDPUS = UDPUS;
		this.dom = dom;
	}

	@Override
	public void addVirtualCharacter(int clientno) {
		
	}

	@Override
	public void addItem(String name, int index, boolean shared) {
		
	}

	@Override
	public void updateVirtualCharacter(int clientno, String dir, int speed,
			int x, int y) {
		
	}

	@Override
	public void updateItem(int index, boolean shared, String owner) {
		
	}

	@Override
	public void output(String command) {
		// TODO Auto-generated method stub	
	}

}
