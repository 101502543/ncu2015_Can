package cot.qin.sre;

import static org.junit.Assert.assertEquals;

import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;

import org.junit.Test;

public class SRETest extends JFrame {

	@Test
	public void testRenderScene() {
		//setup
		SceneRenderEngine sre = SceneRenderEngine.getInstance();
		DOMmok dom = DOMmok.getInstance();
		Panel panel = new Panel();
		add(panel);
		panel.setFocusable(true);
		setTitle("Clash of Tower"); 
		setSize(1000, 600);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
		setVisible(true);
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(10, 29);
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(29, 10);
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(40, 30);
		sre.renderScene();
		//assert
		assertEquals(true, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	class Panel extends JPanel{
		SceneRenderEngine sre = SceneRenderEngine.getInstance();
		@Override
		public void paintComponents(Graphics g) {
			// TODO Auto-generated method stub
			super.paintComponents(g);
			int[] information = sre.paintMap();
//			int[] information = {zeroX,zeroY,X,Y,windowSize,nextColumn[0],nextColumn[1],nextRow[0],nextRow[1],imageSize};
//			int theX = zeroX, theY = zeroY;
//			for (int y = Y; y < Y + windowSize; y++) {
//				for (int x = X; x < X + windowSize; x++) {
//					ImageIcon test = new ImageIcon(map.getBlockImage(x, y));
//					Image img = test.getImage();
//					g.drawImage(img, theX + (x - X) * nextColumn[0], theY + (x - X)
//							* nextColumn[1], imageSize, imageSize, panel);
//				}
//				theX = zeroX + (y - Y) * nextRow[0];
//				theY = zeroY + (y - Y) * nextRow[1];
//			}
		}
	}
}
