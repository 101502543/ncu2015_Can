package cot.qin.sre;

import static org.junit.Assert.assertEquals;

import java.awt.Graphics;
import java.awt.Image;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

import org.junit.Test;

import cot.qin.sdm.SceneDataModule;

public class SRETest extends JFrame {

	@Test
	public void testRenderScene() {
		//setup
		SceneRenderEngine sre = SceneRenderEngine.getInstance();
		DOMmok dom = DOMmok.getInstance();
		Panel panel = new Panel();
		add(panel);
		panel.setFocusable(true);
		setTitle("Clash of Tower"); 
		setSize(1000, 600);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
		setVisible(true);
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(10, 29);
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(29, 10);
		sre.renderScene();
		//assert
		assertEquals(false, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//exercise
		dom.setXY(40, 30);
		sre.renderScene();
		//assert
		assertEquals(true, sre.outOfBoundXY);
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	class Panel extends JPanel{
		SceneRenderEngine sre = SceneRenderEngine.getInstance();
		SceneDataModule sdm = SceneDataModule.getInstance();
		@Override
		public void paintComponents(Graphics g) {
			// TODO Auto-generated method stub
			super.paintComponents(g);
			int[] information = sre.paintMap();
//			int[] information = {zeroX,zeroY,X,Y,windowSize,nextColumn[0],nextColumn[1],nextRow[0],nextRow[1],imageSize};
			int theX = information[0], theY = information[1];
			for (int y = information[3]; y < information[3] + information[4]; y++) {
				for (int x = information[2]; x < information[2] + information[4]; x++) {
					ImageIcon test = new ImageIcon(sdm.getMap().getBlockImage(x, y));
					Image img = test.getImage();
					g.drawImage(img, theX + (x - information[2]) * information[5], theY + (x - information[2])
							* information[6], information[9], information[9], this);
				}
				theX = information[0] + (y - information[3]) * information[7];
				theY = information[1] + (y - information[3]) * information[8];
			}
		}
	}
}
